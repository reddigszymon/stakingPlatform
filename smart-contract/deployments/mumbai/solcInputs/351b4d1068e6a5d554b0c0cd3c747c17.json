{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "contracts/StakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n/// @title ERC20 Staking Contract\r\n/// @notice This contract allows for stake ERC20 tokens and receive ERC20 tokens as rewards\r\n/// @dev This contract allows for updating the duration of reward period at any given moment.\r\n\r\ncontract StakingRewards is ReentrancyGuard {\r\n    // ============= VARIABLES ============\r\n    // Contract address of the staked token\r\n    IERC20 public immutable stakingToken;\r\n    // Contract address of the rewards token\r\n    IERC20 public immutable rewardsToken;\r\n    // Address of the owner of the contract\r\n    address public owner;\r\n    // Duration of rewards to be paid out (in seconds)\r\n    uint public duration;\r\n    // Timestamp of when the rewards finish\r\n    uint public finishAt;\r\n    // Minimum of last updated time and reward finish time\r\n    uint public updatedAt;\r\n    // Reward to be paid out per second\r\n    uint public rewardRate;\r\n    // Sum of (reward rate * dt * 1e18 / total supply)\r\n    uint public rewardPerTokenStored;\r\n    // Total staked\r\n    uint public totalSupply;\r\n    // Max amount that people can stake\r\n    uint public MAX_AMOUNT_STAKE;\r\n    // The maximum amount of tokens in the staking pool\r\n    uint public MAX_NUM_OF_TOKENS_IN_POOL;\r\n    // Addresses of stakers\r\n    address[] private stakers;\r\n\r\n    // ============= MAPPINGS ============\r\n    // User address => rewardPerTokenStored\r\n    mapping(address => uint) public userRewardPerTokenPaid;\r\n    // User address => rewards to be claimed\r\n    mapping(address => uint) public rewards;\r\n    // User address => staked amount\r\n    mapping(address => uint) public balanceOf;\r\n    // User address => exists\r\n    mapping(address => bool) public userStaked;\r\n\r\n    /// @param _stakingToken - address of the staking token\r\n    /// @param _rewardToken - address of the reward token\r\n    constructor(address _stakingToken, address _rewardToken) {\r\n        owner = msg.sender;\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardsToken = IERC20(_rewardToken);\r\n    }\r\n\r\n    // ============= MODIFIERS ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier that updates rewardPerTokenStored and userRewardPerTokenPaid\r\n    /// @param _account - address of the account that we wish to update rewards for\r\n\r\n    modifier updateReward(address _account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        updatedAt = lastTimeRewardApplicable();\r\n\r\n        if (_account != address(0)) {\r\n            rewards[_account] = earned(_account);\r\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    // ============= MAIN FUNCTIONS ============\r\n\r\n    /// @notice Function that allows to calculate rewardPerTokenStored\r\n\r\n    function rewardPerToken() public view returns (uint) {\r\n        if (totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return\r\n            rewardPerTokenStored +\r\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\r\n            totalSupply;\r\n    }\r\n\r\n    /// @notice Function that allows users to stake their tokens\r\n    /// @param _amount - amount of tokens to stake in WEI\r\n    /// @dev remember to approve the token first from the frontend\r\n    /// @dev when users stake tokens updateReward modifier is fired for them\r\n    function stake(\r\n        uint _amount\r\n    ) external nonReentrant updateReward(msg.sender) {\r\n        require(_amount > 0, \"amount = 0\");\r\n        require(\r\n            balanceOf[msg.sender] + _amount <= MAX_AMOUNT_STAKE,\r\n            \"Too much staked!\"\r\n        );\r\n        require(\r\n            totalSupply + _amount <= MAX_NUM_OF_TOKENS_IN_POOL,\r\n            \"Maximum number of tokens staked has been reached!\"\r\n        );\r\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\r\n        balanceOf[msg.sender] += _amount;\r\n        if (!userStaked[msg.sender]) {\r\n            stakers.push(msg.sender);\r\n            userStaked[msg.sender] = true;\r\n        }\r\n        totalSupply += _amount;\r\n    }\r\n\r\n    /// @notice Function that allows users to withdraw their tokens\r\n    /// @param _amount - amount of tokens to withdraw in WEI\r\n    /// @dev when users withdraw tokens updateReward modifier is fired for them\r\n    function withdraw(\r\n        uint _amount\r\n    ) external nonReentrant updateReward(msg.sender) {\r\n        require(_amount > 0, \"amount = 0\");\r\n        balanceOf[msg.sender] -= _amount;\r\n        totalSupply -= _amount;\r\n        bool success = stakingToken.transfer(msg.sender, _amount);\r\n        require(success, \"Withdraw failed\");\r\n    }\r\n\r\n    /// @notice Function that allows users to withdraw their winnings\r\n    /// @dev when users withdraw rewards updateReward modifier is fired for them\r\n    function withdrawReward() external nonReentrant updateReward(msg.sender) {\r\n        uint reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            bool success = rewardsToken.transfer(msg.sender, reward);\r\n            require(success, \"Withdraw reward failed\");\r\n        }\r\n    }\r\n\r\n    /// @notice Function that allows the owner to specify the rewards and duration for the next reward period\r\n    /// @param _amount - amount of tokens that will be given out as rewards during the given period\r\n    /// @param _duration - duration of the next reward period in seconds\r\n    /// @dev this function is a modified version of the Synthetix ERC20 Staking implementation - it allows\r\n    /// @dev the owner to change the duration before the last one ends - keep in mind in the next period it will give out\r\n    /// @dev the _amount + remaining rewards from the last period that were not given out\r\n    function notifyRewardAmount(\r\n        uint _amount,\r\n        uint _duration\r\n    ) external onlyOwner updateReward(address(0)) {\r\n        uint tokenBalance = getTokensDepositedForRewards();\r\n        require(tokenBalance >= _amount, \"not enough funds in contract\");\r\n        if (duration == 0) {\r\n            duration = _duration;\r\n        }\r\n        if (block.timestamp >= finishAt) {\r\n            rewardRate = _amount / _duration;\r\n        } else {\r\n            uint remainingRewards = (finishAt - block.timestamp) * rewardRate;\r\n            rewardRate = (_amount + remainingRewards) / duration;\r\n        }\r\n\r\n        require(rewardRate > 0, \"reward rate = 0\");\r\n        require(\r\n            rewardRate * duration <= rewardsToken.balanceOf(address(this)),\r\n            \"reward amount > balance\"\r\n        );\r\n\r\n        duration = _duration;\r\n        finishAt = block.timestamp + duration;\r\n        updatedAt = block.timestamp;\r\n    }\r\n\r\n    /// @notice Function that allows the owner to change the user staking limit\r\n    /// @param _amount - the maximum amount a person can stake at once in WEI\r\n    function changeStakeLimit(uint _amount) public onlyOwner {\r\n        MAX_AMOUNT_STAKE = _amount;\r\n    }\r\n\r\n    /// @notice Function that allows the owner to change the pool staking limit\r\n    /// @param _amount - the maximum amount of tokens that the whole staking pool can stake in WEI\r\n    function changePoolLimit(uint _amount) public onlyOwner {\r\n        MAX_NUM_OF_TOKENS_IN_POOL = _amount;\r\n    }\r\n\r\n    /// @notice Function that allows the owner to return ERC20 tokens that were sent to the contract by accident\r\n    /// @param _tokenAddress - ERC20 address of the token\r\n    /// @param _tokenAmount - amount of tokens\r\n    function recoverERC20(\r\n        address _tokenAddress,\r\n        uint256 _tokenAmount\r\n    ) external onlyOwner {\r\n        require(\r\n            _tokenAddress != address(stakingToken),\r\n            \"Cannot withdraw the staking token\"\r\n        );\r\n        IERC20(_tokenAddress).transfer(owner, _tokenAmount);\r\n    }\r\n\r\n    // ============= UTILITY FUNCTIONS ============\r\n\r\n    function _min(uint x, uint y) private pure returns (uint) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint) {\r\n        return _min(finishAt, block.timestamp);\r\n    }\r\n\r\n    // ============= GETTER FUNCTIONS ============\r\n\r\n    function getRewardRate() public view returns (uint) {\r\n        return rewardRate;\r\n    }\r\n\r\n    function getTotalSupply() public view returns (uint) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function secondsLeftTillNewRewards() public view returns (uint) {\r\n        return finishAt < block.timestamp ? 0 : finishAt - block.timestamp;\r\n    }\r\n\r\n    function earned(address _account) public view returns (uint) {\r\n        return\r\n            ((balanceOf[_account] *\r\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\r\n            rewards[_account];\r\n    }\r\n\r\n    /// @notice This function does not take unclaimed rewards under consideration\r\n\r\n    function getTokensDepositedForRewards() public view returns (uint) {\r\n        uint balance = stakingToken.balanceOf(address(this));\r\n        uint sumOfRewards = getTokensEarnedByStakers();\r\n        return balance - totalSupply - sumOfRewards;\r\n    }\r\n\r\n    function getTokensEarnedByStakers() public view returns (uint) {\r\n        uint sum;\r\n        for (uint i = 0; i < stakers.length; i++) {\r\n            uint earnedAmount = earned(stakers[i]);\r\n            sum += earnedAmount;\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    function getStakeLimit() public view returns (uint) {\r\n        return MAX_AMOUNT_STAKE;\r\n    }\r\n\r\n    function getPoolLimit() public view returns (uint) {\r\n        return MAX_NUM_OF_TOKENS_IN_POOL;\r\n    }\r\n\r\n    function getDuration() public view returns (uint) {\r\n        return duration;\r\n    }\r\n\r\n    function getFinishAt() public view returns (uint) {\r\n        return finishAt;\r\n    }\r\n\r\n    function getUpdatedAt() public view returns (uint) {\r\n        return updatedAt;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}